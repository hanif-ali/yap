import type { Metadata } from "next";

import { ClerkProvider } from "@clerk/nextjs";
import { ThemeProvider } from "next-themes";
// import { ThemeToggle } from "../components/ThemeToggle";
import "./globals.css";
import ConvexClientProvider from "./ConvexClientProvider";
import { ThemeToggle } from "@/components/ThemeToggle";
import { fetchMutation } from "convex/nextjs";
import { api } from "../../convex/_generated/api";
import localFont from "next/font/local";
import { UserConfigProvider } from "@/providers/user-config-provider";
import { headers } from "next/headers";
import { getAuthToken } from "@/lib/auth";

const proxima_var = localFont({
  src: "./proxima_vara.woff2",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const token = await getAuthToken();

  const anonId = (await headers()).get("x-anon-id");

  const userConfig = await fetchMutation(
    api.userConfigs.getOrCreateUserConfig,
    {
      // Always available as it is set in middleware
      anonId: anonId!,
    },
    { token: token ?? undefined }
  );

  return (
    <html lang="en" suppressHydrationWarning>
      <body className={`${proxima_var.className} antialiased`}>
        <ClerkProvider>
          <ConvexClientProvider>
            <ThemeProvider attribute="class" defaultTheme="dark" enableSystem>
              <UserConfigProvider userConfig={userConfig!}>
                  {children}
              </UserConfigProvider>
              <ThemeToggle />
            </ThemeProvider>
          </ConvexClientProvider>
        </ClerkProvider>
      </body>
    </html>
  );
}
